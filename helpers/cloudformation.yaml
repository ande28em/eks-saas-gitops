AWSTemplateFormatVersion: 2010-09-09

Description: This stack creates a AWS Cloud9 environment with the container tooling needed for workshops.

Parameters:  
  # Cloud9 Variables
  EnvironmentNameC9:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: "eks-saas-gitops"
  C9InstanceType:
    Description: AWS Cloud9 instance type
    Type: String
    Default: t3.large
    AllowedValues:
      - t3.medium
      - t3.large
      - t3.xlarge
    ConstraintDescription: Must be a valid Cloud9 instance type
  C9EnvType: 
    Description: Environment type.
    Default: event-engine
    Type: String
    AllowedValues: 
      - self
      - 3rdParty
      - event-engine
    ConstraintDescription: must specify self or 3rdParty.
  OwnerArn: 
    Type: String
    Description: The Arn of the Cloud9 Owner to be set if 3rdParty deployment.
    Default: ""
  LatestAmiId:
    Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: "Cloud9 Configuration"
      Parameters:
      - EnvironmentNameC9
      - C9InstanceType
      - C9EnvType
      - OwnerArn

Conditions: 
  Create3rdPartyResources: !Equals [ !Ref C9EnvType, 3rdParty ]
  CreateEventEngineResources: !Equals [ !Ref C9EnvType, event-engine ]

Resources:
################## PERMISSIONS AND ROLES #################
  C9Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: eks-saas-gitops-admin
      Tags:
        - Key: Environment
          Value: !Sub ${EnvironmentNameC9}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - ssm.amazonaws.com
            - eks.amazonaws.com
            - codebuild.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AdministratorAccess
      Path: "/"
      Policies:
      - PolicyName:
          Fn::Join:
          - ''
          - - C9InstanceDenyPolicy-
            - Ref: AWS::Region
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Deny
            Action:
            - cloud9:UpdateEnvironment
            Resource: "*"
  C9LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AdministratorAccess"
      Policies:
      - PolicyName:
          Fn::Join:
          - ''
          - - C9LambdaPolicy-
            - Ref: AWS::Region
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cloudformation:DescribeStacks
            - cloudformation:DescribeStackEvents
            - cloudformation:DescribeStackResource
            - cloudformation:DescribeStackResources
            Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*"
          - Effect: Allow
            Action:
            - ec2:AssociateIamInstanceProfile
            - ec2:ModifyInstanceAttribute
            - ec2:ReplaceIamInstanceProfileAssociation
            Resource: !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
          - Effect: Allow
            Action:
            - ec2:DescribeInstances
            - ec2:DescribeVolumes
            - ec2:DescribeIamInstanceProfileAssociations
            Resource: "*"  
          - Effect: Allow
            Action:
            - ec2:ModifyVolume
            Resource: !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:volume/*"
          - Effect: Allow
            Action:
            - iam:ListInstanceProfiles
            Resource: !Sub arn:aws:iam::${AWS::AccountId}:instance-profile/*
          - Effect: Allow
            Action:
            - iam:PassRole
            Resource: 
              Fn::GetAtt:
                - C9Role
                - Arn
          - Effect: Allow
            Action:
            - ssm:DescribeParameters
            - ssm:GetParameters
            - ssm:PutParameter 
            Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/eks-saas-gitops-*"

################## LAMBDA BOOTSTRAP FUNCTION ################

  C9BootstrapInstanceLambda:
    Type: Custom::C9BootstrapInstanceLambda
    DependsOn:
    - C9LambdaExecutionRole
    - C9ProfileCreation
    Properties:
      Tags:
        - Key: Environment
          Value: !Sub ${EnvironmentNameC9}
      ServiceToken:
        Fn::GetAtt:
        - C9BootstrapInstanceLambdaFunction
        - Arn
      REGION:
        Ref: AWS::Region
      StackName:
        Ref: AWS::StackName
      EnvironmentId:
        Ref: C9Instance
      LabIdeInstanceProfileName:
        Ref: C9InstanceProfile
      LabIdeInstanceProfileArn:
        Fn::GetAtt:
        - C9InstanceProfile
        - Arn      
  C9BootstrapInstanceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Tags:
        - Key: Environment
          Value: AWS Example
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
        - C9LambdaExecutionRole
        - Arn
      Runtime: python3.9
      MemorySize: 256
      Timeout: 600
      Environment:
        Variables:
          SSM_OUTPUT_BUCKET: !Ref C9OutputBucket
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import json
          import os
          import time
          import traceback
          import cfnresponse
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          aws_region = os.environ['AWS_REGION']
          ssm_output_bucket = os.environ['SSM_OUTPUT_BUCKET']

          def get_instance(**kwargs):    
              ec2 = boto3.client('ec2')
              response = ec2.describe_instances(**kwargs)
              for reservation in response['Reservations']:
                  for instance in reservation['Instances']:    
                      if instance['State']['Name'] != 'terminated':
                          return instance
              raise Exception("no instance found") 
              
          def run_ssm_command(target_user, c9_pid, ssm_command, s3_output_prefix):
              ssm = boto3.client('ssm', region_name=aws_region)  

              # Include the variable in the command as an environment variable
              ssm_command_with_variable = f'runuser -l "{target_user}" -c "{ssm_command}"'

              parameters = {
                  "executionTimeout": ["3600"],
                  "commands": [ssm_command_with_variable]
              }

              # Send SSM command to the instance specified by C9_PID
              response = ssm.send_command(
                  InstanceIds=[c9_pid],
                  DocumentName="AWS-RunShellScript",
                  Parameters=parameters,
                  TimeoutSeconds=3600,
                  Comment=ssm_command[:100]  # Truncate to 100 characters for comment
                  OutputS3BucketName=ssm_output_bucket,
                  OutputS3KeyPrefix=s3_output_prefix, 
              )

          def lambda_handler(event, context):
              try:
                  logger.info('event: {}'.format(event))
                  logger.info('context: {}'.format(context))
                  if event['RequestType'] == 'Delete':                      
                      
                      instance = get_instance(Filters=[{'Name': 'tag:SSMBootstrapSaaSGitOps','Values': ['Active']}])
                      logger.info('instance: {}'.format(instance))
                      
                      ssm_client = boto3.client('ssm')
                      ssm_client.put_parameter(
                          Name='eks-saas-gitops-custom-resource-event',
                          Overwrite=True,
                          Value=json.dumps(event),
                          Type='String'
                      )
                      logger.info('SSM parameter eks-saas-gitops-custom-resource-event set - running cleanup.sh', 'cleanupoutput')
                      
                      run_ssm_command('ec2-user', instance['InstanceId'], 'cd /home/ec2-user/environment/eks-saas-gitops-aws && chmod +x cleanup.sh && ./cleanup.sh')

                  if event['RequestType'] == 'Create':                                  
                      ec2 = boto3.client('ec2')

                      instance = get_instance(Filters=[{'Name': 'tag:SSMBootstrapSaaSGitOps','Values': ['Active']}])
                      logger.info('instance: {}'.format(instance))

                      # Create the IamInstanceProfile request object
                      iam_instance_profile = {
                          'Arn': event['ResourceProperties']['LabIdeInstanceProfileArn'],
                          'Name': event['ResourceProperties']['LabIdeInstanceProfileName']
                      }
                      logger.info('iam_instance_profile: {}'.format(iam_instance_profile))

                      # Wait for Instance to become ready before adding Role
                      instance_state = instance['State']['Name']
                      logger.info('instance_state: {}'.format(instance_state))
                      while instance_state != 'running':
                          time.sleep(5)
                          instance_state = get_instance(InstanceIds=[instance['InstanceId']])['State']['Name']    
                          logger.info('instance_state: {}'.format(instance_state))

                      response = ec2.describe_iam_instance_profile_associations(Filters=[{'Name': 'instance-id','Values': [instance['InstanceId']]}])            
                      associations = response.get('IamInstanceProfileAssociations', [])

                      # Loop through the associations and disassociate them
                      for association in associations:
                          association_id = association['AssociationId']            
                          # Disassociate the IAM instance profile
                          ec2.disassociate_iam_instance_profile(AssociationId=association_id)

                      # attach instance profile
                      attach_instance_response = ec2.associate_iam_instance_profile(IamInstanceProfile=iam_instance_profile, InstanceId=instance['InstanceId'])
                      logger.info('response - associate_iam_instance_profile: {}'.format(attach_instance_response))
                      
                      #CFN response will be sent by install.sh after all bootstrapping is complete            
                      #send event to ssm to continue process through ssm
                      ssm_client = boto3.client('ssm')
                      ssm_client.put_parameter(
                          Name='eks-saas-gitops-custom-resource-event',
                          Overwrite=True,
                          Value=json.dumps(event),
                          Type='String'
                      )
                      logger.info('SSM parameter eks-saas-gitops-custom-resource-event set - running install.sh')
                      
              except Exception as e:
                  status = cfnresponse.FAILED
                  logger.error(traceback.format_exc())
                  responseData = {'Error': traceback.format_exc()}
                  cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')             
                      
################## ARTIFACTS BUCKET ###############
  C9OutputBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  C9OutputBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref C9OutputBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:PutObjectAcl'
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref C9OutputBucket
                - /*
            Principal:
              AWS: 
                Fn::GetAtt:
                - C9LambdaExecutionRole
                - Arn
################## SSM Bootstrap for Cloud9 ##################
  C9SSMDocument: 
    Type: AWS::SSM::Document
    Properties: 
      Tags:
        - Key: Environment
          Value: !Sub ${EnvironmentNameC9}
      DocumentType: Command
      Content:
        schemaVersion: '2.2'
        description: Bootstrap Cloud9 Instance
        mainSteps:
        - action: aws:runShellScript
          name: C9bootstrap
          inputs:
            runCommand:
            - "#!/bin/bash"
            - date
            - echo LANG=en_US.utf-8 >> /etc/environment
            - echo LC_ALL=en_US.UTF-8 >> /etc/environment
            - . /home/ec2-user/.bashrc
            - echo '=== UPDATE system packages and INSTALL dependencies ==='
            - yum update -y; yum install -y vim git jq bash-completion moreutils gettext yum-utils perl-Digest-SHA tree
            - echo '=== ENABLE Amazon Extras EPEL Repository and INSTALL Git LFS ==='
            - yum install -y amazon-linux-extras
            - amazon-linux-extras install epel -y
            - yum install -y git-lfs
            - echo '=== INSTALL AWS CLI v2 ==='
            - curl 'https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip' -o 'awscliv2.zip'
            - unzip awscliv2.zip -d /tmp
            - /tmp/aws/install --update
            - rm -rf aws awscliv2.zip
            - echo '=== INSTALL Kubernetes CLI ==='
            - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            - chmod +x kubectl && mv kubectl /usr/local/bin/
            - /usr/local/bin/kubectl completion bash > /etc/bash_completion.d/kubectl
            - echo '=== INSTALL Helm CLI ==='
            - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
            - /usr/local/bin/helm completion bash > /etc/bash_completion.d/helm
            - echo '=== INSTALL Eksctl CLI ==='
            - curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            - mv /tmp/eksctl /usr/local/bin
            - /usr/local/bin/eksctl completion bash > /etc/bash_completion.d/eksctl
            - echo '=== INSTALL Flux CLI ==='
            - curl --silent --location "https://github.com/fluxcd/flux2/releases/download/v0.41.2/flux_0.41.2_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            - mv /tmp/flux /usr/local/bin
            - /usr/local/bin/flux completion bash > /etc/bash_completion.d/flux
            - echo '=== INSTALL PLUTO ==='
            - curl --silent --location "https://github.com/FairwindsOps/pluto/releases/download/v5.16.1/pluto_5.16.1_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            - mv /tmp/pluto /usr/local/bin
            - echo '=== INSTALL KUBENT ==='
            - curl --silent --location "https://github.com/doitintl/kube-no-trouble/releases/download/0.7.0/kubent-0.7.0-$(uname -s)-amd64.tar.gz" | tar xz -C /tmp
            - mv /tmp/kubent /usr/local/bin
            - echo '=== INSTALL kubectl convert plugin ==='
            - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl-convert"
            - sudo install -o root -g root -m 0755 kubectl-convert /usr/local/bin/kubectl-convert
            - echo '=== INSTALL Terraform CLI ==='
            - yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
            - yum -y install terraform
            - echo '=== Exporting ENV Vars ==='
            - export TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds:60")
            - export AWS_REGION=$(curl -H "X-aws-ec2-metadata-token:${TOKEN}" -s http://169.254.169.254/latest/meta-data/placement/availability-zone | sed 's/\(.*\)[a-z]/\1/') && echo "export AWS_REGION=${AWS_REGION}" >> /home/ec2-user/.bashrc
            - export AWS_ACCOUNT_ID="$(aws sts get-caller-identity --query Account --output text)" && echo "export AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}" >> /home/ec2-user/.bashrc
            - echo 'aws cloud9 update-environment  --environment-id $C9_PID --managed-credentials-action DISABLE 2> /dev/null' >> /home/ec2-user/.bashrc
            - echo '====== Provision Terraform ======'
            - git clone https://github.com/aws-samples/eks-saas-gitops.git /home/ec2-user/environment/eks-saas-gitops
            - cp /home/ec2-user/environment/eks-saas-gitops/install.sh /home/ec2-user/environment/install.sh && chmod +x /home/ec2-user/environment/install.sh
            - /home/ec2-user/environment/install.sh
            - echo "Bootstrap completed with return code $?"
            - shutdown -r +1

  C9BootstrapAssociation: 
    Type: AWS::SSM::Association
    Properties: 
      Name: !Ref C9SSMDocument
      OutputLocation: 
        S3Location:
          OutputS3BucketName: !Ref C9OutputBucket
          OutputS3KeyPrefix: bootstrapoutput
      Targets:
        - Key: tag:SSMBootstrapSaaSGitOps
          Values:
          - Active


################## C9 Instance Profile ##################
  C9InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: C9Role

  C9Instance:
    DependsOn: C9BootstrapAssociation
    Type: AWS::Cloud9::EnvironmentEC2     
    Properties:
      ConnectionType: CONNECT_SSM
      Description: !Sub  AWS Cloud9 instance for ${EnvironmentNameC9}
      AutomaticStopTimeMinutes: 3600
      ImageId: amazonlinux-2-x86_64
      InstanceType:
        Ref: C9InstanceType
      Name: eks-saas-gitops
      OwnerArn: !If [Create3rdPartyResources, !Ref OwnerArn, !If [CreateEventEngineResources, !Join ['',['arn:aws:iam::',!Ref 'AWS::AccountId',':assumed-role/WSParticipantRole/Participant']],!Ref "AWS::NoValue"]]
      Tags: 
        - Key: SSMBootstrapSaaSGitOps
          Value: Active
        - Key: Environment
          Value: !Sub ${EnvironmentNameC9}

  WorkshopUser:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: workshop-user
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AdministratorAccess

  WorkshopUserCredentials:
    Type: AWS::IAM::AccessKey
    Properties:
      Status: Active
      UserName: !Ref WorkshopUser

################## LAMBDA CREATE CLOUD9 IAM ROLES FUNCTION ################

  C9ProfileCreation:
    Type: Custom::C9ProfileCreation
    DependsOn:
    - C9LambdaExecutionRole
    Properties:
      Tags:
        - Key: Environment
          Value: !Sub ${EnvironmentNameC9}
      ServiceToken:
        Fn::GetAtt:
        - C9ProfileCreationLambdaFunction
        - Arn
      REGION:
        Ref: AWS::Region
      StackName:
        Ref: AWS::StackName
  C9ProfileCreationLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Tags:
        - Key: Environment
          Value: AWS Example
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
        - C9LambdaExecutionRole
        - Arn
      Runtime: python3.9
      MemorySize: 256
      Timeout: 600
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import json
          import os
          import traceback
          import cfnresponse
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          aws_region = os.environ['AWS_REGION']          

          def lambda_handler(event, context):
              try:
                  logger.info('event: {}'.format(event))
                  logger.info('context: {}'.format(context))
                  
                  if event['RequestType'] == 'Delete':                      
                      status = cfnresponse.SUCCESS
                      responseData = {'Success': 'Custom Resource removed'}
                      cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')

                  if event['RequestType'] == 'Create':
                      # Initialize the IAM client
                      iam = boto3.client('iam')

                      # Specify the IAM role name and instance profile name
                      role_name = 'AWSCloud9SSMAccessRole'
                      instance_profile_name = 'AWSCloud9SSMInstanceProfile'

                      try:
                          # Attempt to create the IAM role
                          iam.create_role(
                              RoleName=role_name,
                              Path='/service-role/',
                              AssumeRolePolicyDocument=json.dumps({
                                  "Version": "2012-10-17",
                                  "Statement": [
                                      {
                                          "Effect": "Allow",
                                          "Principal": {
                                              "Service": ["ec2.amazonaws.com", "cloud9.amazonaws.com"]
                                          },
                                          "Action": "sts:AssumeRole"
                                      }
                                  ]
                              })
                          )
                          iam.attach_role_policy(
                              RoleName=role_name,
                              PolicyArn='arn:aws:iam::aws:policy/AWSCloud9SSMInstanceProfile'
                          )
                      except iam.exceptions.EntityAlreadyExistsException:                
                          logger.info("Role already exists, no need to create it")
                          pass
                      
                      try:
                          iam.create_instance_profile(
                              InstanceProfileName=instance_profile_name,
                              Path='/cloud9/'
                          )

                          iam.add_role_to_instance_profile(
                              InstanceProfileName=instance_profile_name,
                              RoleName=role_name
                          )
                      except iam.exceptions.EntityAlreadyExistsException:                
                          logger.info("Instance profile or role already exists, no need to create or associate them")
                          pass                      

                      status = cfnresponse.SUCCESS
                      responseData = {'Success': 'Custom Resource created'}
                      cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
                      
              except Exception as e:
                  status = cfnresponse.FAILED
                  logger.error(traceback.format_exc())
                  responseData = {'Error': traceback.format_exc()}              
                  cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')         

Outputs:
  Cloud9IDE:
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: AWS::Region
        - ".console.aws.amazon.com/cloud9/ide/"
        - Ref: C9Instance
        - "?region="
        - Ref: AWS::Region
    Export:
      Name: Cloud9IDE
  WorkshopUserKeyId:
    Value: !Ref WorkshopUserCredentials
  WorkshopUserKeySecret:
    Value: !GetAtt WorkshopUserCredentials.SecretAccessKey