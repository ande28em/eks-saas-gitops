AWSTemplateFormatVersion: 2010-09-09

Description: This stack creates a AWS Cloud9 environment with the container tooling needed for workshops.

Parameters:  
  # Cloud9 Variables
  EnvironmentNameC9:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: "eks-saas-gitops"
  C9InstanceType:
    Description: AWS Cloud9 instance type
    Type: String
    Default: t3.large
    AllowedValues:
      - t3.medium
      - t3.large
      - t3.xlarge
    ConstraintDescription: Must be a valid Cloud9 instance type
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: "Cloud9 Configuration"
      Parameters:
      - EnvironmentNameC9
      - C9InstanceType

Resources:
################## PERMISSIONS AND ROLES #################
  C9Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: eks-saas-gitops-admin
      Tags:
        - Key: Environment
          Value: !Sub ${EnvironmentNameC9}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - ssm.amazonaws.com
            - eks.amazonaws.com
            - codebuild.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AdministratorAccess
      Path: "/"
                      
################## ARTIFACTS BUCKET ###############
  C9OutputBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

################## SSM Bootstrap for Cloud9 ##################
  C9SSMDocument: 
    Type: AWS::SSM::Document
    Properties: 
      Tags:
        - Key: Environment
          Value: !Sub ${EnvironmentNameC9}
      DocumentType: Command
      Content:
        schemaVersion: '2.2'
        description: Bootstrap Cloud9 Instance
        mainSteps:
          - action: aws:runShellScript
            name: C9bootstrap
            inputs:
              runCommand:
              - "#!/bin/bash"
              - "mkdir -p /home/ec2-user/environment"
              - "chown -R ec2-user:ec2-user /home/ec2-user/environment"
              - "curl -fsSL https://code-server.dev/install.sh | sudo -u ec2-user sh"
              - "export CODER_PASSWORD=$(openssl rand -base64 12)"
              - "mkdir -p /home/ec2-user/.config/code-server/"
              - "echo 'bind-addr: 0.0.0.0:8080' > /home/ec2-user/.config/code-server/config.yaml"
              - "echo 'auth: password' >> /home/ec2-user/.config/code-server/config.yaml"
              - "echo password: $CODER_PASSWORD >> /home/ec2-user/.config/code-server/config.yaml"
              - "chown -R ec2-user:ec2-user /home/ec2-user/.config/"
              - "aws ssm put-parameter --name 'coder-password' --type 'String' --value \"$CODER_PASSWORD\" --overwrite"
              - "yum update -y"
              - "yum install -y docker && systemctl start docker && systemctl enable docker"
              - "yum install -y vim git jq bash-completion moreutils gettext yum-utils perl-Digest-SHA"
              - "yum install -y git-lfs"
              - "yum install -y tree"
              - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              - "chmod +x kubectl && mv kubectl /usr/local/bin/"
              - "/usr/local/bin/kubectl completion bash > /etc/bash_completion.d/kubectl"
              - "curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash"
              - "/usr/local/bin/helm completion bash > /etc/bash_completion.d/helm"
              - curl --silent --location "https://github.com/fluxcd/flux2/releases/download/v2.2.3/flux_2.2.3_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
              - "mv /tmp/flux /usr/local/bin"
              - "/usr/local/bin/flux completion bash > /etc/bash_completion.d/flux"
              - "wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq"
              - "yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo"
              - "yum -y install terraform"
              - export TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds:60")
              - export AWS_REGION=$(curl -H "X-aws-ec2-metadata-token:${TOKEN}" -s http://169.254.169.254/latest/meta-data/placement/availability-zone | sed 's/\(.*\)[a-z]/\1/') && echo "export AWS_REGION=${AWS_REGION}" >> /home/ec2-user/.bashrc
              - "git clone https://github.com/aws-samples/eks-saas-gitops.git /home/ec2-user/environment/eks-saas-gitops"
              - "chmod +x /home/ec2-user/environment/eks-saas-gitops/scripts/*.sh"
              - "chown -R ec2-user:ec2-user /home/ec2-user/environment/eks-saas-gitops"
              - "ssh-keygen -t rsa -b 4096 -f /home/ec2-user/environment/flux -N ''"
              - "cp /home/ec2-user/environment/flux /root/.ssh/id_rsa && chmod 600 /root/.ssh/id_rsa"
              - "cp /home/ec2-user/environment/flux.pub /root/.ssh/id_rsa.pub && chmod 600 /root/.ssh/id_rsa.pub"
              - "cp /home/ec2-user/environment/flux /home/ec2-user/.ssh/id_rsa && chmod 600 /home/ec2-user/.ssh/id_rsa && chown ec2-user:ec2-user /home/ec2-user/.ssh/id_rsa"
              - "cp /home/ec2-user/environment/flux.pub /home/ec2-user/.ssh/id_rsa.pub && chmod 600 /home/ec2-user/.ssh/id_rsa.pub && chown ec2-user:ec2-user /home/ec2-user/.ssh/id_rsa.pub"
              - "mkdir /home/ec2-user/environment/workshop"
              - ssh-keyscan "git-codecommit.$AWS_REGION.amazonaws.com" > /home/ec2-user/.ssh/known_hosts && chmod 600 /home/ec2-user/.ssh/known_hosts && chown ec2-user:ec2-user /home/ec2-user/.ssh/known_hosts
              - ssh-keyscan "git-codecommit.$AWS_REGION.amazonaws.com" > /root/.ssh/known_hosts && chmod 600 /root/.ssh/known_hosts
              - echo "export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> /home/ec2-user/.bashrc
              - "/home/ec2-user/environment/eks-saas-gitops/terraform/install.sh /home/ec2-user/.ssh/id_rsa.pub /home/ec2-user/.ssh/id_rsa /home/ec2-user/environment/workshop /home/ec2-user/.ssh/known_hosts"
              - echo export REPO_PATH=/home/ec2-user/environment/workshop >> /home/ec2-user/.bashrc
              - aws eks --region $AWS_REGION update-kubeconfig --name eks-saas-gitops
              - mkdir /home/ec2-user/.kube && cp /root/.kube/config /home/ec2-user/.kube/ && chown -R ec2-user:ec2-user /home/ec2-user/.kube/config
              - chown -R ec2-user:ec2-user /home/ec2-user/environment/workshop
              - cp -a /home/ec2-user/environment/eks-saas-gitops/scripts/. /home/ec2-user/environment/scripts
              - sleep 300 && /home/ec2-user/environment/eks-saas-gitops/terraform/quick_fix_flux.sh && sleep 120
              - kubectl create secret generic github-ssh-key --from-file=ssh-privatekey=/home/ec2-user/environment/flux --from-literal=ssh-privatekey.mode=0600 -nargo-workflows --kubeconfig /root/.kube/config
              - rm -rf /home/ec2-user/environment/eks-saas-gitops/
              - sudo -u ec2-user nohup /usr/bin/code-server --port 8080 --host 0.0.0.0 > /dev/null 2>&1 &
              - "export WAIT_HANDLE_URL=$(aws ssm get-parameter --name '/eks-saas-gitops/waitcondition-url' --query 'Parameter.Value' --output text --region $AWS_REGION)"
              - "curl -X PUT -H 'Content-Type: application/json' --data-binary '{\"Status\" : \"SUCCESS\", \"Reason\" : \"Environment Completed\", \"UniqueId\" : \"123456\", \"Data\" : \"Complete\"}' \"$WAIT_HANDLE_URL\""


  C9BootstrapAssociation: 
    Type: AWS::SSM::Association
    Properties: 
      Name: !Ref C9SSMDocument
      OutputLocation: 
        S3Location:
          OutputS3BucketName: !Ref C9OutputBucket
          OutputS3KeyPrefix: bootstrapoutput
      Targets:
        - Key: tag:SSMBootstrapSaaSGitOps
          Values:
          - Active

################## WAIT CONDITION ##################
  C9WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  C9WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: C9BootstrapAssociation  # Ensure EC2 instance creation first
    Properties:
      Handle: !Ref C9WaitHandle
      Timeout: '2000'  # 30 minutes timeout for the script to complete
  
  WaitConditionUrlParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub /${EnvironmentNameC9}/waitcondition-url
      Type: "String"
      Value: !Ref C9WaitHandle


################## C9 Instance Profile ##################
  C9InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: C9Role

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref C9InstanceType
      IamInstanceProfile: !Ref C9InstanceProfile
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentNameC9}-Instance
        - Key: SSMBootstrapSaaSGitOps
          Value: Active
        - Key: Environment
          Value: !Sub ${EnvironmentNameC9}
  
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: EC2SecurityGroup
      GroupDescription: Allow SSH and Code-Server access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

# TBD add vscode password and build EC2 URL.
Outputs:
  VsCodeIdeURl:
    Description: The URL to access VS Code IDE
    Value: !Sub "http://${EC2Instance.PublicDnsName}:8080/?folder=/home/ec2-user/environment"
  VsCodePassword:
    Description: The VS Code IDE password
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/systems-manager/parameters/coder-password"
